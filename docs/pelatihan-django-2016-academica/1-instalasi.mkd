#Pelatihan Django 2016 #1 - Instalasi dan Persiapan

Django adalah salah satu *web framework* yang diperuntukkan Python dan masih menjadi nomor satu di dunia dan dunia kerja. Django memiliki sejumlah fitur handal yang dapat membuat pengguna *web framework* tersebut menjadi betah dengan Django. Django dikenal dengan kecepatannya dalam memulai sebuah proyek karena keunggulannya yang memiliki halaman admin khusus yang dinamakan Django Admin Page. Selain itu, Django memiliki *class model* yang dapat digunakan untuk berbagai keperluan seperi validasi *form*, membuat RESTful API, dan tentu saja membuat aplikasi *web*.

Beberapa *package* Django yang dapat membuat Anda lebih produktif antara lain:

* Django Rest Framework
* Django AllAuth
* Django HayStack
* Django Channel
* Django Hijack 
* dan lainnya

Sedangkan fitur bawaan Django yang sangat disukai oleh pengguna Django sendiri adalah:

* *Migration tools* yang lebih praktis dibandingkan dengan *web framework* lain seperti Yii2 dan Laravel
* Halaman django admin dapat menolong Anda saat inisiasi proyek bahkan hingga proyek tersebut berjalan
* *Authentication* dan *authorization system built-in*
* Templating engine yang sangat kokoh dan lengkap
* Integrasi ke berbagai teknologi lain seperti Elasticsearch, MongoDB, Cassandra, RabbitMQ, dan lainnya
* Dokumentasi yang bersih, lengkap, dan terstruktur dengan baik
* dan masih banyak lagi fitur lainnya

##Instalasi

Untuk memasang Django di Ubuntu Linux, Anda dapat mengikuti beberapa perintah berikut ini:
```
$ sudo apt-get install python
$ sudo apt-get install python-pip
$ sudo pip install django
```

Untuk memasang Django di Windows, ada cukup banyak langkah yang harus dilalui agar Django dapat terpasang dengan baik di komputer Anda:

- install Python
- atur python di PATH Windows Environment Variable
- download source Django kemudian ekstrak dengan winzip, 7zip, atau winrar
- masuk ke dalam folder hasil ekstrak django
- jalankan perintah
```
C:\> python setup.py install
```

Periksa apakah Django berhasil terpasang atau tidak dengan menjalankan perintah berikut di konsol:
```
$ django-admin.py --version
1.9.5
```

Sekarang saatnya kita membuat sebuah proyek aplikasi nilai *online* sederhana yang bernama **academica**:
```
$ django-admin.py startproject academica
```

Sebagai perkenalan dan permulaan, Anda sudah dapat menjalankan *webserver* bawaan Django untuk menjalakan proyek nilai *online* kita. Jalankan perintah berikut di dalam *folder* proyek:
```
$ cd academica
$ python manage.py runserver
```

Berikut adalah tampilan awal Django saat baru pertama kali dijalankan:

![test](screenshot/part1/1.png)

Sekarang mari kita lakukan migrasi tabel untuk membuat tabel - tabel *default* Django:

```
$ python manage.py migrate
```

Kemudian setelah selesai melakukan migrasi, saatnya membuat super user yang dapat menguasai seluruh sistem dengan perintah berikut:
```
$ python manage.py createsuperuser
```

##Membuat Django Apps

Django menganut sistem *apps*, artinya setiap proyek Django memiliki *sub*-proyek dimana Anda dapat memisahkan kode - kode dari aplikasi *web* Anda ke berbagai aplikasi kecil yang dapat membantu Anda memudahkan pengorganisasian *file* dan *folder*. Sebuah Django *apps* umumnya memiliki beberapa *file* berikut saat pertama kali dibuat:

* models.py, berisi kode untuk mendefinsikan tabel yang akan dimiliki suatu *apps*. Tabel tersebut akan dimigrasi ke *database* yang akan menjadi tempat menyimpan tabel - tabel dari aplikasi Django kita
* admin.py, berisi kode untuk menyambungkan models ke halaman Django Admin
* tests.py, berisi kode untuk melakukan *functional* dan *acceptance* testing
* views.py, berisi kode untuk menjalankan bisnis proses kita dan perantara antara *models* dan *template*
* _ _ _ init _ _ _.py, sebuah *file* wajib yang akan digunakan Python untuk menganggap suatu *folder* dapat di-*import*
* apps.py, berisi konfigurasi untuk aplikasi saat ini
* migrations, berisi *file - file* yang akan dihasilkan saat proses migrasi tabel

Sekarang kita akan mencoba membuat beberapa *apps* yang akan digunakan selama pelatihan ini. Jalankan perintah berikut di dalam *folder* **academica** di konsol:
```
$ python manage.py startapp tatausaha
$ python manage.py startapp kuliah
$ python manage.py startapp akses
$ python manage.py startapp homepage
```

Bila semuanya berhasil berjalan, maka Anda akan dapat melihat ada berbagai *folder* dengan nama *apps* yang telah kita jalankan menggunakan "python manage.py startapp".  Sebelum kita lanjutkan ke langkah selanjutnya berikut adalah penjelasan untuk setiap *apps* yang akan kita kembangkan:

* **tatausaha**, di dalam *apps* ini akan menyimpan model untuk entitas akademik seperti Dosen, Mahasiswa, dan Ruangan
* **kuliah**, di dalam *apps* ini akan menyimpan model untuk melakukan kontrak kuliah dan pembentukan jadwal kuliah
* **akses**, di dalam *apps* ini akan menyimpan model untuk menyambungkan *user* yang terdaftar ke Django dengan biodata mahasiswa
* **homepage**, di dalam *apps* ini akan terdapat berbagai *views* yang menangani masalah *login*, *logout*, tampil nilai perkuliahan, dan view/edit profil mahasiswa

##Mengatur settings.py

Di Django, setiap aplikasi yang akan kita sertakan atau kembangkan, harus didaftarkan terlebih dahulu ke *file* **settings.py**. Di tutorial ini, Anda harus mendaftarkan keempat nama *apps* yang sudah dibuat sebelumnya ke **academica/settings.py**. Tambahkan nama - nama *apps* tersebut di dalam *list* **INSTALLED_APPS**. Sebagai contoh, hal tersebut dilakukan untuk mendaftarkan *apps* agar dapat di-*import* oleh *apps* lain dan dapat mendeteksi adanya perubahan *model* pada *apps* untuk ditindaklanjuti hingga proses migrasi ke *database*.

```

.............................................................................



# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tatausaha',
    'kuliah',
    'homepage',
    'akses',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'academica.urls'


.............................................................................


```

Modul pertama selesai, silahkan lanjut ke modul kedua :D.